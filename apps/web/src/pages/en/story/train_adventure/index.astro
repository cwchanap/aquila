---
import MainLayout from '@/layouts/main.astro';
import en from '@aquila/dialogue/translations/en.json';
import zh from '@aquila/dialogue/translations/zh.json';

// Helper function to get translations
const t = (key: string): string => {
  const locale = Astro.currentLocale || 'en';
  const keys = key.split('.');
  let value: Record<string, unknown> = locale === 'zh' ? zh : en;

  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k] as Record<string, unknown>;
    } else {
      return key;
    }
  }

  return typeof value === 'string' ? value : key;
};
---

<MainLayout title={t("adventure.title")}>
  <div id="game-container" data-locale={Astro.currentLocale || 'zh'} class="w-full h-screen bg-black"></div>
</MainLayout>

<script>
  import Phaser from 'phaser';
  import { PreloadScene, StoryScene } from '@aquila/game';

  document.addEventListener('DOMContentLoaded', () => {
    const storyId = 'train_adventure';
    const container = document.getElementById('game-container');
    const defaultLocale = (container?.getAttribute('data-locale') || 'en');
    const locale = defaultLocale;

    // Resolve character name and enforce setup flow before starting the game
    async function resolveCharacterName() {
      try {
        // Check session state
        const sessionRes = await fetch('/api/simple-auth/session', { credentials: 'include' });
        const sessionData = await sessionRes.json().catch(() => ({ user: null }));
        const user = sessionData?.user || null;

        if (user && user.id) {
          // Logged-in: must have DB setup for this story
          const res = await fetch(`/api/character-setup?storyId=${storyId}`, { credentials: 'include' });
          if (!res.ok) {
            // Unexpected unauthorized while logged in; send to setup
            window.location.href = `/${locale}/story/setup?story=${storyId}`;
            return null;
          }
          const data = await res.json();
          const name = (data && typeof data.characterName === 'string') ? data.characterName.trim() : '';
          if (!name) {
            window.location.href = `/${locale}/story/setup?story=${storyId}`;
            return null;
          }
          return name;
        } else {
          // Guest: allow only if a local setup exists; otherwise send to setup
          try {
            const local = localStorage.getItem(`aquila:character:${storyId}`);
            if (local) {
              const parsed = JSON.parse(local);
              const localName = (parsed && typeof parsed.characterName === 'string') ? parsed.characterName.trim() : '';
              if (localName) {
                return localName;
              }
            }
          } catch (e) {
            console.warn('Failed to read local character setup:', e);
          }
          window.location.href = `/${locale}/story/setup?story=${storyId}`;
          return null;
        }
      } catch (e) {
        console.warn('Failed to resolve session/setup; redirecting to setup', e);
        window.location.href = `/${locale}/story/setup?story=${storyId}`;
        return null;
      }
    }

    resolveCharacterName().then((characterName) => {
      if (!characterName) return;

      const config = {
        type: Phaser.AUTO,
        width: window.innerWidth,
        height: window.innerHeight,
        parent: 'game-container',
        backgroundColor: '#2c3e50',
        scene: [PreloadScene, StoryScene],
        scale: {
          mode: Phaser.Scale.RESIZE,
          autoCenter: Phaser.Scale.CENTER_BOTH
        }
      };

      const game = new Phaser.Game(config);
      // Pass character name, locale, and storyId to the preload scene (it forwards to StoryScene)
      game.scene.start('PreloadScene', { characterName, locale, storyId });
    });
  });
</script>