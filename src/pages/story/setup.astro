---
import MainLayout from '@/layouts/main.astro';
import Button from '@/components/ui/Button.svelte';
import UserStatus from '@/components/UserStatus.astro';
import { auth } from '@/lib/auth.js';
import { CharacterSetupRepository } from '@/lib/repositories.js';
import { isValidStoryId, StoryId } from '@/lib/story-types.js';

// Get the story parameter from URL
const url = Astro.url;
const storyParam = url.searchParams.get('story');

// Validate story parameter
if (!storyParam || !isValidStoryId(storyParam)) {
  return Astro.redirect('/stories');
}

const storyId = storyParam as StoryId;

// Try to get session, but do not require auth
let session;
try {
  session = await auth.api.getSession({ headers: Astro.request.headers });
} catch (err) {
  console.error('getSession error on setup page:', err);
}
const isAuthed = Boolean(session?.user?.id);

// If authenticated, check if character setup already exists in DB
if (isAuthed) {
  const existingSetup = await CharacterSetupRepository.findByUserAndStory(session.user.id, storyId);
  if (existingSetup) {
    return Astro.redirect(`/story/${storyId}?name=${encodeURIComponent(existingSetup.characterName)}`);
  }
}
---

<MainLayout title="Setup Character">
  <div id="setup-root" data-authed={isAuthed} data-story={storyId} class="min-h-screen bg-gradient-to-br from-blue-500 via-blue-600 to-green-500 flex items-center justify-center relative">
    <!-- Back button -->
    <a 
      href="/stories"
      class="absolute top-6 left-6 p-3 bg-white/20 hover:bg-white/30 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border border-white/30 backdrop-blur-sm z-10"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </a>

    <!-- User status -->
    <UserStatus />

    <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 shadow-2xl border border-white/20 max-w-md w-full mx-4">
      <h1 class="text-4xl font-bold text-white text-center mb-8 drop-shadow-lg">
        Setup Your Character
      </h1>

      <form id="setup-form" class="space-y-4">
        <label for="character-name" class="block text-white text-lg font-semibold mb-2">Main Character Name:</label>
        <input
          type="text"
          id="character-name"
          name="name"
          placeholder="Enter your character's name"
          class="w-full py-3 px-4 bg-white/10 text-white placeholder-white/50 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
          required
        />

        <Button variant="menu" type="submit" client:load>
          Start Adventure
        </Button>
      </form>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const form = document.getElementById('setup-form');
    const root = document.getElementById('setup-root');
    const urlParams = new URLSearchParams(window.location.search);
    const story = (root?.getAttribute('data-story') || urlParams.get('story') || 'train_adventure');
    const isAuthed = (root?.getAttribute('data-authed') === 'true');

    // If not authenticated, and there's a saved local setup, redirect immediately
    if (!isAuthed) {
      try {
        const local = localStorage.getItem(`aquila:character:${story}`);
        if (local) {
          const { characterName } = JSON.parse(local);
          if (characterName && typeof characterName === 'string') {
            window.location.href = `/story/${story}?name=${encodeURIComponent(characterName)}`;
            return;
          }
        }
      } catch (e) {
        console.warn('Failed to read local character setup:', e);
      }
    }

    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const nameInput = document.getElementById('character-name') as HTMLInputElement;
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const name = nameInput.value.trim();
        
        if (!name) {
          alert('Please enter a character name');
          return;
        }

        // Disable form during submission
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';

        try {
          if (isAuthed) {
            // Save character setup to database
            const response = await fetch('/api/character-setup', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                characterName: name,
                storyId: story
              })
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.error || 'Failed to save character setup');
            }
          } else {
            // Save character setup locally
            localStorage.setItem(`aquila:character:${story}`, JSON.stringify({ characterName: name }));
          }

          // Redirect to story
          window.location.href = `/story/${story}?name=${encodeURIComponent(name)}`;
        } catch (error) {
          console.error('Setup error:', error);
          alert('Failed to save character setup. Please try again.');
          
          // Re-enable form
          submitButton.disabled = false;
          submitButton.textContent = 'Start Adventure';
        }
      });
    }
  });
</script>